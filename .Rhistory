knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
ggplot(X, aes(x = Estatura, y = Peso)) +
geom_point(aes(colour=Sexo, shape=Sexo), size = 3) +
xlab("Estatura") +
ylab("Peso") +
ggtitle("Sexo vs Estatura & Peso")
as.data.frame(z)
zz <- as.data.frame(z)
zz <- as.data.frame(z[-1,])
ggplot(zz, aes(iter, err)) +
xlab("Iteraciones") +
ylab("Error de clasificación") +
ggtitle("Error de Clasificación")
ggplot(zz, aes(iter, err)) +
geom_point(aes(colour=err, shape=err), size = 3) +
xlab("Iteraciones") +
ylab("Error de clasificación") +
ggtitle("Error de Clasificación")
ggplot(zz, aes(iter, err)) +
geom_point(aes(shape=err), size = 3) +
xlab("Iteraciones") +
ylab("Error de clasificación") +
ggtitle("Error de Clasificación")
ggplot(zz, aes(iter, err)) +
geom_point(shape=err, size = 3) +
xlab("Iteraciones") +
ylab("Error de clasificación") +
ggtitle("Error de Clasificación")
ggplot(zz, aes(iter, err)) +
geom_point(err, size = 3) +
xlab("Iteraciones") +
ylab("Error de clasificación") +
ggtitle("Error de Clasificación")
ggplot(zz, aes(iter, err)) +
geom_point(shape=err, size = 3) +
xlab("Iteraciones") +
ylab("Error de clasificación") +
ggtitle("Error de Clasificación")
?geom_point
ggplot(zz, aes(iter, err)) +
geom_point(shape=err, color="blue", size = 3) +
xlab("Iteraciones") +
ylab("Error de clasificación") +
ggtitle("Error de Clasificación")
ggplot(zz, aes(iter, err)) +
geom_point(shape=err, color="green", size = 3) +
xlab("Iteraciones") +
ylab("Error de clasificación") +
ggtitle("Error de Clasificación")
###
#X$G <- substr(X$Sexo, 1, 1)
X$G <- as.numeric(X$Peso>=mean(X$Peso))
X$Uno <- 1
head(X)
plot(X$Estatura, X$Edad, type = "n", xlab="Estatura", ylab="Edad")
cols <- rep("blue",nrow(X))
cols[which(X$G==1)] <- "black"
text(X$Estatura, X$Edad, X$G, col=cols)
X$Peso_class <- ifelse(X$G==1, "Peso Mayor a la Media", "Peso Menor a la Media")
ggplot(X, aes(x = Estatura, y = Edad)) +
geom_point(aes(colour=Peso_class, shape=Peso_class), size = 3) +
xlab("Estatura") +
ylab("Edad") +
ggtitle("Peso vs Estatura & Edad")
X$G <- as.numeric(X$Peso>=mean(X$Peso))
X$Uno <- 1
X$Peso_class <- ifelse(X$G==1, "Peso Mayor a la Media", "Peso Menor a la Media")
ggplot(X, aes(x = Estatura, y = Edad)) +
geom_point(aes(colour=Peso_class, shape=Peso_class), size = 3) +
xlab("Estatura") +
ylab("Edad") +
ggtitle("Peso vs Estatura & Edad")
w <- c(0,0,0) #Estatura, Peso, Ind
done <- FALSE
iter <- 0
max.iter <- 10000
a <- 1
b <- 1
z <- c(10,10,10,10)
names(z) <- c("iter", "a", "b", "err")
err <- 0
plot(X$Estatura, X$Edad, type = "n", xlab="Estatura", ylab="Peso",asp=1, main="Peso ~ Edad + Estatura")
cols <- rep("blue",nrow(X))
cols[which(X$G=="M")] <- "black"
text(X$Estatura, X$Peso, X$G, col=cols)
text(X$Estatura, X$Edad, X$G, col=cols)
plot(X$Estatura, X$Edad, type = "n", xlab="Estatura", ylab="Peso",asp=1, main="Peso ~ Edad + Estatura")
cols <- rep("blue",nrow(X))
cols[which(X$G=="M")] <- "black"
text(X$Estatura, X$Edad, X$G, col=cols)
plot(X$Estatura, X$Edad, type = "n", xlab="Estatura", ylab="Edad",asp=1, main="Peso ~ Edad + Estatura")
cols <- rep("blue",nrow(X))
cols[which(X$G==1)] <- "black"
text(X$Estatura, X$Edad, X$G, col=cols)
plot(X$Estatura, X$Edad, type = "n", xlab="Estatura", ylab="Edad")
cols <- rep("blue",nrow(X))
cols[which(X$G==1)] <- "black"
text(X$Estatura, X$Edad, X$G, col=cols)
plot(X$Estatura, X$Edad, type = "n", xlab="Estatura", ylab="Edad",asp=1, main="Peso ~ Edad + Estatura")
cols <- rep("blue",nrow(X))
text(X$Estatura, X$Edad, X$G, col=cols)
plot(X$Estatura, X$Edad, type = "n", xlab="Estatura", ylab="Edad",asp=1, main="Peso ~ Edad + Estatura")
cols <- rep("blue",nrow(X))
cols[which(X$G==1)] <- "black"
text(X$Estatura, X$Edad, X$G, col=cols)
plot(X$Estatura, X$Edad, type = "n", xlab="Estatura", ylab="Edad")
cols <- rep("blue",nrow(X))
cols[which(X$G==1)] <- "black"
text(X$Estatura, X$Edad, X$G, col=cols)
plot(X$Estatura, X$Edad, type = "n", xlab="Estatura", ylab="Edad")
cols <- rep("blue",nrow(X))
cols[which(X$G==1)] <- "black"
text(X$Estatura, X$Edad, X$G, col=cols)
plot(X$Estatura, X$Edad, type = "n", xlab="Estatura", ylab="Edad")
cols <- rep("blue",nrow(X))
cols[which(X$G==1)] <- "black"
text(X$Estatura, X$Edad, X$G, col=cols)
plot(X$Estatura, X$Edad, type = "n", xlab="Estatura", ylab="Edad")
cols <- rep("blue",nrow(X))
cols[which(X$G==1)] <- "black"
text(X$Estatura, X$Edad, X$G, col=cols)
plot(X$Estatura, X$Edad, type = "n", xlab="Estatura", ylab="Edad")
cols <- rep("blue",nrow(X))
cols[which(X$G==1)] <- "black"
text(X$Estatura, X$Edad, X$G, col=cols)
plot(X$Estatura, X$Peso, type = "n", xlab="Estatura", ylab="Peso",asp=1, main="Sexo ~ Peso + Estatura")
cols <- rep("blue",nrow(X))
cols[which(X$G=="M")] <- "black"
text(X$Estatura, X$Peso, X$G, col=cols)
X[ind,c(2,1,3)]
X[ind,c(2,1,9)]
X[i,3]
X[i,2]
head(X)
# Preámbulo
rm(list=ls())
graphics.off()
X <- readRDS("X.rds")
### ¿Qué pasa si no se hace esta normalización?
X[,c(2,3)] <- X[,c(2,3)]/100
X$G <- substr(X$Sexo, 1, 1)
X$G <- substr(X$Sexo, 1, 1)
X$g <- as.numeric(X$G=="M")
l <- nrow(X)
plot(X$Estatura, X$Peso, type = "n", xlab="Estatura", ylab="Peso",asp=1,
xlim=c(1,2.5),ylim=c(0,1.5))
cols <- rep("blue",nrow(X))
cols[which(X$G=="M")] <- "black"
#text(X$Estatura, X$Peso, X$G, col=cols)
points(X$Estatura, X$Peso, pch=16, col=cols)
# Límites de simulación, basados en {estatura, peso}/100
lims <- c(1, 2.5,#Estatura, eje X
0, 1.5) #Peso, eje Y
nuevopunto <- function(lims=lims){
a <- runif(1,lims[1],lims[2])
b <- runif(1,lims[3],lims[4])
return(c(a, b))
}
### Parámetro k del algoritmo.
### Evalúe el comportamiento para k={1, 3}
### ¿Qué problema hay con k=2? ¿Cómo se puede resolver?
k <- 3
for(iter in 1:20000){
x <- nuevopunto(lims)
diss <- dist(rbind(x,X[,c(2,3)]))[1:21]
knn <- head(order(diss),k)
etiqueta <- names(sort(table(X$G[knn]),decreasing = TRUE))[1]
clase <- as.numeric(etiqueta=="M")
for(inn in 1:k){
if(X$G[knn[inn]]==etiqueta){
### Ensaye ambos tipos de visualización
#lines(c(x[1],X$Estatura[knn[inn]]),c(x[2],X$Peso[knn[inn]]),
#col=c("blue","black")[clase+1])
points(x[1],x[2],col=c("blue","black")[clase+1],pch=20)
}
}
}
cols2 <- rep("red",nrow(X))
cols2[which(X$G=="M")] <- "green"
points(X$Estatura, X$Peso, pch=16, col=cols2)
plot(X$Estatura, X$Peso, type = "n", xlab="Estatura", ylab="Peso",asp=1,
xlim=c(1,2.5),ylim=c(0,1.5))
cols <- rep("blue",nrow(X))
cols[which(X$G=="M")] <- "black"
#text(X$Estatura, X$Peso, X$G, col=cols)
points(X$Estatura, X$Peso, pch=16, col=cols)
# Límites de simulación, basados en {estatura, peso}/100
lims <- c(1, 2.5,#Estatura, eje X
0, 1.5) #Peso, eje Y
nuevopunto <- function(lims=lims){
a <- runif(1,lims[1],lims[2])
b <- runif(1,lims[3],lims[4])
return(c(a, b))
}
### Parámetro k del algoritmo.
### Evalúe el comportamiento para k={1, 3}
### ¿Qué problema hay con k=2? ¿Cómo se puede resolver?
k <- 1
for(iter in 1:20000){
x <- nuevopunto(lims)
diss <- dist(rbind(x,X[,c(2,3)]))[1:21]
knn <- head(order(diss),k)
etiqueta <- names(sort(table(X$G[knn]),decreasing = TRUE))[1]
clase <- as.numeric(etiqueta=="M")
for(inn in 1:k){
if(X$G[knn[inn]]==etiqueta){
### Ensaye ambos tipos de visualización
#lines(c(x[1],X$Estatura[knn[inn]]),c(x[2],X$Peso[knn[inn]]),
#col=c("blue","black")[clase+1])
points(x[1],x[2],col=c("blue","black")[clase+1],pch=20)
}
}
}
cols2 <- rep("red",nrow(X))
cols2[which(X$G=="M")] <- "green"
points(X$Estatura, X$Peso, pch=16, col=cols2)
for(iter in 1:20000){
x <- nuevopunto(lims)
diss <- dist(rbind(x,X[,c(2,3)]))[1:21]
knn <- head(order(diss),k)
etiqueta <- names(sort(table(X$G[knn]),decreasing = TRUE))[1]
clase <- as.numeric(etiqueta=="M")
for(inn in 1:k){
if(X$G[knn[inn]]==etiqueta){
### Ensaye ambos tipos de visualización
lines(c(x[1],X$Estatura[knn[inn]]),c(x[2],X$Peso[knn[inn]]),
col=c("blue","black")[clase+1])
#points(x[1],x[2],col=c("blue","black")[clase+1],pch=20)
}
}
}
cols2 <- rep("red",nrow(X))
cols2[which(X$G=="M")] <- "green"
points(X$Estatura, X$Peso, pch=16, col=cols2)
### Parámetro k del algoritmo.
### Evalúe el comportamiento para k={1, 3}
### ¿Qué problema hay con k=2? ¿Cómo se puede resolver?
k <- 2
for(iter in 1:20000){
x <- nuevopunto(lims)
diss <- dist(rbind(x,X[,c(2,3)]))[1:21]
knn <- head(order(diss),k)
etiqueta <- names(sort(table(X$G[knn]),decreasing = TRUE))[1]
clase <- as.numeric(etiqueta=="M")
for(inn in 1:k){
if(X$G[knn[inn]]==etiqueta){
### Ensaye ambos tipos de visualización
lines(c(x[1],X$Estatura[knn[inn]]),c(x[2],X$Peso[knn[inn]]),
col=c("blue","black")[clase+1])
#points(x[1],x[2],col=c("blue","black")[clase+1],pch=20)
}
}
}
cols2 <- rep("red",nrow(X))
cols2[which(X$G=="M")] <- "green"
points(X$Estatura, X$Peso, pch=16, col=cols2)
plot(X$Estatura, X$Peso, type = "n", xlab="Estatura", ylab="Peso",asp=1,
xlim=c(1,2.5),ylim=c(0,1.5))
cols <- rep("blue",nrow(X))
cols[which(X$G=="M")] <- "black"
#text(X$Estatura, X$Peso, X$G, col=cols)
points(X$Estatura, X$Peso, pch=16, col=cols)
k <- 1
for(iter in 1:20000){
x <- nuevopunto(lims)
diss <- dist(rbind(x,X[,c(2,3)]))[1:21]
knn <- head(order(diss),k)
etiqueta <- names(sort(table(X$G[knn]),decreasing = TRUE))[1]
clase <- as.numeric(etiqueta=="M")
for(inn in 1:k){
if(X$G[knn[inn]]==etiqueta){
points(x[1],x[2],col=c("blue","black")[clase+1],pch=20)
}
}
}
cols2 <- rep("red",nrow(X))
cols2[which(X$G=="M")] <- "green"
points(X$Estatura, X$Peso, pch=16, col=cols2)
lims <- c(1, 2.5, 0, 1.5)
nuevopunto <- function(lims=lims){
a <- runif(1,lims[1],lims[2])
b <- runif(1,lims[3],lims[4])
return(c(a, b))
}
k <- 1
for(iter in 1:20000){
x <- nuevopunto(lims)
diss <- dist(rbind(x,X[,c(2,3)]))[1:21]
knn <- head(order(diss),k)
etiqueta <- names(sort(table(X$G[knn]),decreasing = TRUE))[1]
clase <- as.numeric(etiqueta=="M")
for(inn in 1:k){
if(X$G[knn[inn]]==etiqueta){
points(x[1],x[2],col=c("blue","black")[clase+1],pch=20)
}
}
}
plotcd(dm[sample(1:198,1),])
image(1:65,1:65,t(apply(x,2,rev)),asp=1,xaxt="n",yaxt="n",
col=grey((0:255)/255),ann=FALSE,bty="n")
plotcd <- function(v){
x <- matrix(v,64,64)
image(1:65,1:65,t(apply(x,2,rev)),asp=1,xaxt="n",yaxt="n",
col=grey((0:255)/255),ann=FALSE,bty="n")
}
load("gatosperros.Rdata")
graphics.off()
plotcd(dm[sample(1:198,1),])
dim(dm)
PCA <- prcomp(dm, scale = TRUE)
plot(PCA)
biplot(prcomp(dm, scale = TRUE))
biplot(prcomp(dm, scale = TRUE))
plot(PCA$sdev)
plot(cumsum(PCA$sdev^2)/sum(PCA$sdev^2))
abline(h=0.5, col="blue")
abline(h=0.8, col="red")
knitr::opts_chunk$set(echo = TRUE)
PCA <- prcomp(dm, scale = TRUE)
plot(cumsum(PCA$sdev^2)/sum(PCA$sdev^2), xlab = "Dimensiones", ylab = "ds", main = "Varianza Acumulada")
abline(h=0.5, col="blue")
abline(h=0.8, col="red")
PCA <- prcomp(dm, scale = TRUE)
plot(cumsum(PCA$sdev^2)/sum(PCA$sdev^2), xlab = "Dimensiones", ylab = "ds", main = "Varianza Acumulada")
abline(h=0.5, col="blue")
abline(h=0.8, col="red")
lims <- c(1, 2.5, 0, 1.5)
nuevopunto <- function(lims=lims){
a <- runif(1,lims[1],lims[2])
b <- runif(1,lims[3],lims[4])
return(c(a, b))
}
plotcd(dm[sample(1:198,1),])
ggplot(dos_dim, aes(Comp1, Comp2)) + geom_point(aes(colour=animal2))
plot(cumsum(PCA$sdev^2)/sum(PCA$sdev^2))
abline(h=0.5, col="blue")
abline(h=0.8, col="red")
dim(dm)
dos_dim <- data.frame("Comp1" = PCA$x[,1], "Comp2" = PCA$x[,2])
dos_dim$animal <- c(rep(1,99), rep(0, 99))
dos_dim$animal2 <- ifelse(dos_dim$animal==1, "Gato", "Perro")
ggplot(dos_dim, aes(Comp1, Comp2)) + geom_point(aes(colour=animal2))
library(ggplot2)
ggplot(dos_dim, aes(Comp1, Comp2)) + geom_point(aes(colour=animal2))
dos_dim <- data.frame("Comp1" = PCA$x[,1], "Comp2" = PCA$x[,2])
dos_dim$animal <- c(rep(1,99), rep(0, 99))
dos_dim$animal2 <- ifelse(dos_dim$animal==1, "Gato", "Perro")
ggplot(dos_dim, aes(Comp1, Comp2)) + geom_point(aes(colour=animal2))
ggplot(dos_dim, aes(Comp1, Comp2)) + geom_point(aes(colour=animal2))
# Límites de simulación, basados en {estatura, peso}/100
lims <- c(-4000, 2000,#Estatura, eje X
-4000, 4000) #Peso, eje Y
nuevopunto <- function(lims=lims){
a <- runif(1,lims[1],lims[2])
b <- runif(1,lims[3],lims[4])
return(c(a, b))
}
### Parámetro k del algoritmo.
### Evalúe el comportamiento para k={1, 3}
### ¿Qué problema hay con k=2? ¿Cómo se puede resolver?
k <- 3
for(iter in 1:2000){
x <- nuevopunto(lims)
diss <- dist(rbind(x,X[,c(2,3)]))[1:198]
knn <- head(order(diss),k)
etiqueta <- names(sort(table(X$G[knn]),decreasing = TRUE))[1]
clase <- as.numeric(etiqueta=="M")
for(inn in 1:k){
if(X$G[knn[inn]]==etiqueta){
### Ensaye ambos tipos de visualización
#lines(c(x[1],X$Estatura[knn[inn]]),c(x[2],X$Peso[knn[inn]]),
#col=c("blue","black")[clase+1])
points(x[1],x[2],col=c("blue","black")[clase+1],pch=20)
}
}
}
for(iter in 1:2000){
x <- nuevopunto(lims)
diss <- dist(rbind(x,X[,c(2,3)]))[1:198]
knn <- head(order(diss),k)
etiqueta <- names(sort(table(X$G[knn]),decreasing = TRUE))[1]
clase <- as.numeric(etiqueta=="M")
for(inn in 1:k){
if(X$G[knn[inn]]==etiqueta){
### Ensaye ambos tipos de visualización
#lines(c(x[1],X$Estatura[knn[inn]]),c(x[2],X$Peso[knn[inn]]),
#col=c("blue","black")[clase+1])
points(x[1],x[2],col=c("blue","black")[clase+1],pch=20)
}
}
}
cols2 <- rep("red",nrow(X))
cols2[which(X$G=="M")] <- "green"
points(X$Estatura, X$Peso, pch=16, col=cols2)
x
X[,c(2,3)]
knn <- head(order(diss),k)
etiqueta <- names(sort(table(X$G[knn]),decreasing = TRUE))[1]
clase <- as.numeric(etiqueta=="M")
for(inn in 1:k){
if(X$G[knn[inn]]==etiqueta){
### Ensaye ambos tipos de visualización
#lines(c(x[1],X$Estatura[knn[inn]]),c(x[2],X$Peso[knn[inn]]),
#col=c("blue","black")[clase+1])
points(x[1],x[2],col=c("blue","black")[clase+1],pch=20)
}
}
X$G
X$G[knn[inn]]
inn
knn[inn]
X$G[knn[inn]]
plot(X$Estatura, X$Peso, type = "n", xlab="Estatura", ylab="Peso",asp=1,
xlim=c(1,2.5),ylim=c(0,1.5))
cols <- rep("blue",nrow(X))
cols[which(X$G=="M")] <- "black"
#text(X$Estatura, X$Peso, X$G, col=cols)
points(X$Estatura, X$Peso, pch=16, col=cols)
nuevopunto <- function(lims=lims){
a <- runif(1,lims[1],lims[2])
b <- runif(1,lims[3],lims[4])
return(c(a, b))
}
# Límites de simulación, basados en {estatura, peso}/100
lims <- c(1, 2.5,#Estatura, eje X
0, 1.5) #Peso, eje Y
X
graphics.off()
X <- readRDS("X.rds")
### ¿Qué pasa si no se hace esta normalización?
# No separa hombres de mujeres afectivamente
X[,c(2:3)] <- X[,c(2,3)]/100
###
X$G <- substr(X$Sexo, 1, 1)
X$g <- as.numeric(X$G=="M")
X$Uno <- 1
head(X)
cols2 <- rep("red",nrow(X))
cols2[which(X$G=="M")] <- "green"
points(X$Estatura, X$Peso, pch=16, col=cols2)
for(iter in 1:20000){
x <- nuevopunto(lims)
diss <- dist(rbind(x,X[,c(2,3)]))[1:21]
knn <- head(order(diss),k)
etiqueta <- names(sort(table(X$G[knn]),decreasing = TRUE))[1]
clase <- as.numeric(etiqueta=="M")
for(inn in 1:k){
if(X$G[knn[inn]]==etiqueta){
### Ensaye ambos tipos de visualización
lines(c(x[1],X$Estatura[knn[inn]]),c(x[2],X$Peso[knn[inn]]),
col=c("blue","black")[clase+1])
#points(x[1],x[2],col=c("blue","black")[clase+1],pch=20)
}
}
}
cols2 <- rep("red",nrow(X))
cols2[which(X$G=="M")] <- "green"
points(X$Estatura, X$Peso, pch=16, col=cols2)
# Preámbulo
rm(list=ls())
graphics.off()
X <- readRDS("X.rds")
### ¿Qué pasa si no se hace esta normalización?
X[,c(2,3)] <- X[,c(2,3)]/100
X$G <- substr(X$Sexo, 1, 1)
X$g <- as.numeric(X$G=="M")
l <- nrow(X)
plot(X$Estatura, X$Peso, type = "n", xlab="Estatura", ylab="Peso",asp=1,
xlim=c(1,2.5),ylim=c(0,1.5))
cols <- rep("blue",nrow(X))
cols[which(X$G=="M")] <- "black"
#text(X$Estatura, X$Peso, X$G, col=cols)
points(X$Estatura, X$Peso, pch=16, col=cols)
# Límites de simulación, basados en {estatura, peso}/100
lims <- c(1, 2.5,#Estatura, eje X
0, 1.5) #Peso, eje Y
nuevopunto <- function(lims=lims){
a <- runif(1,lims[1],lims[2])
b <- runif(1,lims[3],lims[4])
return(c(a, b))
}
### Parámetro k del algoritmo.
### Evalúe el comportamiento para k={1, 3}
### ¿Qué problema hay con k=2? ¿Cómo se puede resolver?
k <- 2
for(iter in 1:20000){
x <- nuevopunto(lims)
diss <- dist(rbind(x,X[,c(2,3)]))[1:21]
knn <- head(order(diss),k)
etiqueta <- names(sort(table(X$G[knn]),decreasing = TRUE))[1]
clase <- as.numeric(etiqueta=="M")
for(inn in 1:k){
if(X$G[knn[inn]]==etiqueta){
### Ensaye ambos tipos de visualización
lines(c(x[1],X$Estatura[knn[inn]]),c(x[2],X$Peso[knn[inn]]),
col=c("blue","black")[clase+1])
#points(x[1],x[2],col=c("blue","black")[clase+1],pch=20)
}
}
}
cols2 <- rep("red",nrow(X))
cols2[which(X$G=="M")] <- "green"
points(X$Estatura, X$Peso, pch=16, col=cols2)
plot(X$Estatura, X$Peso, type = "n", xlab="Estatura", ylab="Peso",asp=1,
xlim=c(1,2.5),ylim=c(0,1.5))
cols <- rep("blue",nrow(X))
cols[which(X$G=="M")] <- "black"
#text(X$Estatura, X$Peso, X$G, col=cols)
points(X$Estatura, X$Peso, pch=16, col=cols)
X[,c(2,3)]
x
